# Generated by Django 2.2.1 on 2019-05-13 13:38

import acl.default_acl
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import django_mysql.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Acl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='最后修改时间')),
                ('acl', django_mysql.models.JSONField(default=acl.default_acl.row_acl)),
                ('is_active', models.BooleanField(default=True, verbose_name='删除标记')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('scope', models.CharField(db_index=True, max_length=50, verbose_name='类型(表/视图/操作..)')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='名称')),
                ('read', django_mysql.models.JSONField(default=acl.default_acl.read_acl)),
                ('write', django_mysql.models.JSONField(default=acl.default_acl.write_acl)),
                ('update', django_mysql.models.JSONField(default=acl.default_acl.update_acl)),
                ('delete', django_mysql.models.JSONField(default=acl.default_acl.delte_acl)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='最后修改时间')),
                ('acl', django_mysql.models.JSONField(default=acl.default_acl.row_acl)),
                ('is_active', models.BooleanField(default=True, verbose_name='删除标记')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='角色名')),
                ('desc', models.CharField(max_length=50, verbose_name='描述')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='最后修改时间')),
                ('acl', django_mysql.models.JSONField(default=acl.default_acl.row_acl)),
                ('is_active', models.BooleanField(default=True, verbose_name='删除标记')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='权限组')),
                ('desc', models.CharField(max_length=50, verbose_name='描述')),
                ('roles', models.ManyToManyField(to='acl.Role')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='最后修改时间')),
                ('acl', django_mysql.models.JSONField(default=acl.default_acl.row_acl)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('mobile', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(message='Mobile format error!', regex='^1\\d{10}$')], verbose_name='手机号码')),
                ('nickname', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer.             Letters, digits and @/./+/-/_ only.', max_length=150, verbose_name='nickname')),
                ('groups', models.ManyToManyField(to='acl.Group')),
                ('roles', models.ManyToManyField(to='acl.Role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
